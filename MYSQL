USE avancedeproyecto;

-- Eliminar objetos existentes 
DROP VIEW IF EXISTS ReporteVentas;
DROP TRIGGER IF EXISTS tr_seguimiento_al_crear_pedido;
DROP TRIGGER IF EXISTS tr_actualiza_stock_por_compra;
DROP TRIGGER IF EXISTS tr_compras_no_duplicadas;
DROP TRIGGER IF EXISTS tr_update_stock_detallepedidos;
DROP PROCEDURE IF EXISTS sp_VentasDiarias;
DROP PROCEDURE IF EXISTS sp_ClientesQ1;
DROP PROCEDURE IF EXISTS sp_InsertarCliente;

-- Eliminar tablas (orden: hijos -> padres)
DROP TABLE IF EXISTS SeguimientoClientes;
DROP TABLE IF EXISTS Compras;
DROP TABLE IF EXISTS DetallePedidos;
DROP TABLE IF EXISTS Pedidos;
DROP TABLE IF EXISTS Proveedores;
DROP TABLE IF EXISTS Clientes;
DROP TABLE IF EXISTS Productos;
DROP TABLE IF EXISTS categorias;

--  tablas

CREATE TABLE categorias (
  id_categoria INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  UNIQUE (nombre)
);

CREATE TABLE Productos (
  id_producto INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  precio DECIMAL(10,2) NOT NULL,
  stock INT NOT NULL DEFAULT 0,
  id_categoria INT,
  FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

CREATE TABLE Clientes (
  id_cliente INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  ap_paterno VARCHAR(100),
  ap_materno VARCHAR(100),
  telefono VARCHAR(20),
  email VARCHAR(100) UNIQUE,
  direccion VARCHAR(100)
);

CREATE TABLE Proveedores (
  id_proveedor INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  telefono VARCHAR(20),
  email VARCHAR(100)
);

CREATE TABLE Pedidos (
  id_pedido INT AUTO_INCREMENT PRIMARY KEY,
  id_cliente INT,
  fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  estado ENUM('CREADO','PAGADO','CANCELADO','ENVIADO') DEFAULT 'CREADO',
  total DECIMAL(10,2) DEFAULT 0,
  canal ENUM('TIENDA','ONLINE','APP') DEFAULT 'TIENDA',
  FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente)
);

CREATE TABLE DetallePedidos (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_pedido INT,
  id_producto INT,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (id_pedido) REFERENCES Pedidos(id_pedido),
  FOREIGN KEY (id_producto) REFERENCES Productos(id_producto)
);

CREATE TABLE Compras (
  id_compra INT AUTO_INCREMENT PRIMARY KEY,
  id_proveedor INT,
  id_producto INT,
  cantidad INT NOT NULL,
  fecha DATE NOT NULL,
  FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor),
  FOREIGN KEY (id_producto) REFERENCES Productos(id_producto)
);

CREATE TABLE SeguimientoClientes (
  id_seguimiento INT AUTO_INCREMENT PRIMARY KEY,
  id_cliente INT,
  nombre_cliente VARCHAR(250),
  id_pedido INT,
  canal ENUM('TIENDA','ONLINE','APP'),
  fecha_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  observaciones VARCHAR(500),
  FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente),
  FOREIGN KEY (id_pedido) REFERENCES Pedidos(id_pedido)
);

-- 2) Inserts de ejemplo 

INSERT INTO categorias (nombre) VALUES
('Herramientas'), ('Pinturas'), ('Tornillería'), ('Eléctrico'), ('Plomería');

INSERT INTO Productos (nombre, precio, stock, id_categoria) VALUES 
('Martillo', 120.00, 15, 1),
('Brocha 3"', 45.00, 30, 2),
('Caja de tornillos', 80.00, 50, 3),
('Cable eléctrico 10m', 200.00, 20, 4),
('Llave de paso', 150.00, 10, 5);

INSERT INTO Clientes (nombre, ap_paterno, ap_materno, telefono, email, direccion) VALUES
('Carlos', 'Ramírez', 'López', '5512345678', 'carlos7@mail.com', 'Calle Falsa 123'),
('Ana', 'Martínez', 'Gómez', '5523456789', 'anamtz@gmail.com', 'Av. Siempre Viva 2'),
('Luis', 'Hernández', 'Pérez', '5534567890', 'luis@gmail.com', 'Calle Real 45'),
('María', 'García', 'Flores', '5545678901', 'mariaflrs@gmail.com', 'Calle Luna 7'),
('Pedro', 'Sánchez', 'Torres', '5556789012', 'pedro34@gmail.com', 'Calle Sol 10');

INSERT INTO Proveedores (nombre, telefono, email) VALUES
('FerreMax', '5591112233', 'contacto@ferremax.com'),
('Herramientas SA', '5592223344', 'ventas@herramientas.com'),
('Feggusa Mayoreo', '5593334455', 'info@pinturaspro.com'),
('Ferreteria mi proveedor', '5594445566', 'tornillos@mx.com'),
('Plomería Global', '5595556677', 'ventas@plomeriaglobal.com.mx');

-- Insertar Pedidos
INSERT INTO Pedidos (id_cliente, estado, total, canal, fecha) VALUES
(1, 'PAGADO', 245.00, 'ONLINE', '2025-01-15 10:00:00'),
(2, 'CREADO', 120.00, 'TIENDA', '2025-01-20 12:30:00'),
(3, 'ENVIADO', 200.00, 'APP', '2025-02-05 14:15:00'),
(4, 'CANCELADO', 150.00, 'TIENDA', '2025-02-10 09:00:00'),
(5, 'PAGADO', 80.00, 'ONLINE', '2025-02-12 16:45:00');

-- Detalle de pedidos
INSERT INTO DetallePedidos (id_pedido, id_producto, cantidad, precio_unitario) VALUES
(1, 1, 1, 120.00), (1, 2, 1, 45.00), (1, 3, 1, 80.00),
(2, 1, 1, 120.00),
(3, 4, 1, 200.00),
(4, 5, 1, 150.00),
(5, 3, 1, 80.00);

-- Compras
INSERT INTO Compras (id_proveedor, id_producto, cantidad, fecha) VALUES
(1, 1, 50, '2025-01-15'),
(2, 2, 100, '2025-01-20'),
(3, 3, 200, '2025-02-01'),
(4, 4, 80, '2025-02-10'),
(5, 5, 60, '2025-02-12');

--  VISTA
CREATE VIEW ReporteVentas AS
SELECT 
    p.id_pedido,
    c.nombre AS cliente,
    c.email,
    pr.nombre AS producto,
    cat.nombre AS categoria,
    dp.cantidad,
    dp.precio_unitario,
    (dp.cantidad * dp.precio_unitario) AS total,
    p.fecha,
    p.estado
 FROM Pedidos p
 JOIN Clientes c ON p.id_cliente = c.id_cliente
 JOIN DetallePedidos dp ON p.id_pedido = dp.id_pedido
 JOIN Productos pr ON dp.id_producto = pr.id_producto
 JOIN categorias cat ON pr.id_categoria = cat.id_categoria;

--  PROCEDIMIENTOS

DELIMITER $$
CREATE PROCEDURE sp_VentasDiarias (
  IN p_fecha DATE,
  OUT p_total_diario DECIMAL(12,2)
)
BEGIN
  -- Desglose de ventas en la fecha
  SELECT
    p.id_pedido,
    c.id_cliente,
    CONCAT(c.nombre,' ',COALESCE(c.ap_paterno,''),' ',COALESCE(c.ap_materno,'')) AS cliente,
    pr.id_producto,
    pr.nombre AS producto,
    dp.cantidad,
    dp.precio_unitario,
    (dp.cantidad * dp.precio_unitario) AS total_item,
    p.fecha
  FROM Pedidos p
  JOIN Clientes c ON p.id_cliente = c.id_cliente
  JOIN DetallePedidos dp ON p.id_pedido = dp.id_pedido
  JOIN Productos pr ON dp.id_producto = pr.id_producto
  WHERE DATE(p.fecha) = p_fecha;

  -- Suma total
  SELECT IFNULL(SUM(dp.cantidad * dp.precio_unitario),0) INTO p_total_diario
  FROM Pedidos p
  JOIN DetallePedidos dp ON p.id_pedido = dp.id_pedido
  WHERE DATE(p.fecha) = p_fecha;
END$$

CREATE PROCEDURE sp_ClientesQ1 (
  IN p_year INT
)
BEGIN
  SELECT DISTINCT
    c.id_cliente,
    c.nombre,
    c.ap_paterno,
    c.ap_materno,
    c.email,
    COUNT(p.id_pedido) AS pedidos_en_Q1
  FROM Clientes c
  JOIN Pedidos p ON c.id_cliente = p.id_cliente
  WHERE DATE(p.fecha) BETWEEN STR_TO_DATE(CONCAT(p_year,'-01-01'), '%Y-%m-%d')
                          AND STR_TO_DATE(CONCAT(p_year,'-03-31'), '%Y-%m-%d')
  GROUP BY c.id_cliente, c.nombre, c.ap_paterno, c.ap_materno, c.email
  ORDER BY pedidos_en_Q1 DESC;
END$$

CREATE PROCEDURE sp_InsertarCliente(
  IN p_nombre VARCHAR(150),
  IN p_ap_paterno VARCHAR(100),
  IN p_ap_materno VARCHAR(100),
  IN p_telefono VARCHAR(20),
  IN p_email VARCHAR(100)
)
BEGIN
  DECLARE EXIT HANDLER FOR 1062 -- Duplicate entry
  BEGIN
    SELECT 'ERROR: Ya existe un cliente con ese correo electrónico.' AS MensajeError;
  END;

  INSERT INTO Clientes (nombre, ap_paterno, ap_materno, telefono, email)
  VALUES (p_nombre, p_ap_paterno, p_ap_materno, p_telefono, p_email);

  SELECT LAST_INSERT_ID() AS id_nuevo_cliente;
END$$
DELIMITER ;

--  TRIGGERS

-- Trigger: no permitir compras duplicadas 
DELIMITER $$
CREATE TRIGGER tr_compras_no_duplicadas
BEFORE INSERT ON Compras
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT 1 FROM Compras
    WHERE id_proveedor = NEW.id_proveedor
      AND id_producto = NEW.id_producto
      AND fecha = NEW.fecha
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Registro duplicado: ya existe una compra de ese proveedor y producto en la misma fecha';
  END IF;
END$$
DELIMITER ;

-- Trigger: actualizar stock después de insertar compra
DELIMITER $$
CREATE TRIGGER tr_actualiza_stock_por_compra
AFTER INSERT ON Compras
FOR EACH ROW
BEGIN
  UPDATE Productos
  SET stock = stock + NEW.cantidad
  WHERE id_producto = NEW.id_producto;
END$$
DELIMITER ;

-- Trigger: actualizar stock al insertar detalle de pedido
DELIMITER $$
CREATE TRIGGER tr_update_stock_detallepedidos
BEFORE INSERT ON DetallePedidos
FOR EACH ROW
BEGIN
  DECLARE disponible INT;
  SELECT stock INTO disponible FROM Productos WHERE id_producto = NEW.id_producto FOR UPDATE;

  IF disponible < NEW.cantidad THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuficiente para este producto';
  ELSE
    UPDATE Productos
    SET stock = stock - NEW.cantidad
    WHERE id_producto = NEW.id_producto;
  END IF;
END$$
DELIMITER ;

-- Trigger: 
DELIMITER $$
CREATE TRIGGER tr_seguimiento_al_crear_pedido
AFTER INSERT ON Pedidos
FOR EACH ROW
BEGIN
  IF NEW.canal IN ('ONLINE','APP') THEN
    INSERT INTO SeguimientoClientes (id_cliente, nombre_cliente, id_pedido, canal, fecha_hora, observaciones)
    VALUES (
      NEW.id_cliente,
      (SELECT CONCAT(nombre, ' ', COALESCE(ap_paterno,''), ' ', COALESCE(ap_materno,'')) FROM Clientes WHERE id_cliente = NEW.id_cliente),
      NEW.id_pedido,
      NEW.canal,
      NEW.fecha,
      'Nuevo pedido por canal digital - seguimiento automático'
    );
  END IF;
END$$
DELIMITER ;

-- 6) Consultas de ejemplo 

-- JOIN: ventas con categoría
-- SELECT p.id_pedido, c.nombre AS cliente, pr.nombre AS producto, cat.nombre AS categoria, dp.cantidad, dp.precio_unitario, p.estado, p.fecha
-- FROM Pedidos p
-- JOIN DetallePedidos dp ON p.id_pedido = dp.id_pedido
-- JOIN Productos pr ON dp.id_producto = pr.id_producto
-- JOIN categorias cat ON pr.id_categoria = cat.id_categoria
 -- JOIN Clientes c ON p.id_cliente = c.id_cliente;

-- GROUP BY: total ventas por categoría
-- SELECT cat.nombre AS categoria, SUM(dp.cantidad * dp.precio_unitario) AS total_ventas, SUM(dp.cantidad) AS total_unidades
-- FROM DetallePedidos dp
-- JOIN Productos pr ON dp.id_producto = pr.id_producto
-- JOIN categorias cat ON pr.id_categoria = cat.id_categoria
-- GROUP BY cat.nombre
-- ORDER BY total_ventas DESC;

-- UNION: contactos (clientes + proveedores)
-- SELECT nombre AS nombre_contacto, telefono, email, 'CLIENTE' AS tipo FROM Clientes
-- UNION
-- SELECT nombre AS nombre_contacto, telefono, email, 'PROVEEDOR' AS tipo FROM Proveedores
-- ORDER BY nombre_contacto;

-- Manejo de fechas: ventas último mes
-- SELECT p.id_pedido, p.fecha, c.nombre, SUM(dp.cantidad * dp.precio_unitario) AS total_pedido
-- FROM Pedidos p
-- JOIN DetallePedidos dp ON p.id_pedido = dp.id_pedido
-- JOIN Clientes c ON p.id_cliente = c.id_cliente
-- WHERE p.fecha >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
-- GROUP BY p.id_pedido, p.fecha, c.nombre
-- ORDER BY p.fecha DESC;

